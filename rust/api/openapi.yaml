openapi: 3.0.0
info:
  contact:
    email: support@schnooty.com
  description: This is the Schnooty API. It is used by both our agent and web application
    to manage your monitors, agents, alerts, account settings and everything else
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Schnooty API
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: /
paths:
  /authentication/jwt:
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtObject'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      security:
      - BasicAuth: []
      summary: Create an API token in the form of a JWT.
      tags:
      - Authentication
  /challenge:
    post:
      operationId: create_challenge
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationChallenge'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
      summary: Create a challenge to prove you are human
      tags:
      - Challenge
  /challenge/{id}:
    post:
      operationId: update_challenge
      parameters:
      - description: ID of registration to confirm.
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationChallenge'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
      summary: Solve a challenge and prove you are human.
      tags:
      - Challenge
  /registration:
    post:
      description: This is the endpoint you will use to create an account. This will
        enable you to use the API. By submitting your email address, password, and
        a name for your account, you will be emailed a confirmation code. The confirmation
        code will be valid for 24 hours or less, and may only be used once. Note that
        this API will respond with a 200 response code even if your email address
        is in Open Monitor's system. This is for privacy reasons.
      operationId: create_registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
        description: Details for registering an account.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      summary: Register your email address and password.
      tags:
      - Registration
  /registration/{id}:
    post:
      operationId: confirm_registration
      parameters:
      - description: ID of registration to confirm.
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationConfirmation'
        description: Details including confirmation code that prove the user's email
          address.
        required: true
      responses:
        "204":
          description: The registration was confirmed. You can now authenticate using
            the email address and password.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      summary: Confirm registration of account.
      tags:
      - Registration
  /monitors:
    get:
      description: "Returns a collection of all monitors created. \n"
      operationId: get_monitors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorArray'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      security:
      - BearerAuth:
        - read.monitors
      summary: Get a list of all monitors in your account.
      tags:
      - Monitors
    post:
      description: Create a new monitor from the details in the request.
      operationId: post_monitor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Monitor'
        description: Specify what should be monitored and when.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      security:
      - BearerAuth:
        - write.monitors
      summary: Create a new monitor
      tags:
      - Monitors
  /monitors/{id}:
    delete:
      parameters:
      - description: ID of monitor to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
      security:
      - BearerAuth:
        - write.monitors
      tags:
      - Monitors
    get:
      operationId: get_monitor_by_id
      parameters:
      - description: ID of monitor to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      security:
      - BearerAuth:
        - read.monitors
      summary: Get a monitor by ID
      tags:
      - Monitors
    put:
      operationId: update_monitor
      parameters:
      - description: ID of monitor
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Monitor'
        description: Specify what should be monitored and when.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      security:
      - BearerAuth:
        - write.monitors
      summary: Update an existing monitor by ID
      tags:
      - Monitors
  /statuses:
    get:
      operationId: get_monitor_statuses
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorStatusArray'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
      security:
      - BearerAuth:
        - read.statuses
      tags:
      - Statuses
    post:
      operationId: update_monitor_statuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitorStatusArray'
        description: Specify what should be monitored and when.
        required: true
      responses:
        "204":
          description: NoContent
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
      security:
      - BearerAuth:
        - write.statuses
      tags:
      - Statuses
  /alerts:
    get:
      description: Retrieve all of the alerts you have created in your account.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertArray'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      security:
      - BearerAuth:
        - write.monitors
      tags:
      - Alerts
    post:
      description: Create a new alert that can be activated when a monitor goes down.
        An alert can be a message (email, Microsoft teams), or it can call a web service
        (webhook). An alert is associated with zero or more of your monitors. If your
        alert has more than one monitor, the alert will be activated only when the
        number of monitors that goes down exceededs the `threshold`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alert'
        description: Create a new alert.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
          description: OK
        "204":
          description: NoContent
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      tags:
      - Alerts
  /alerts/{id}:
    delete:
      parameters:
      - description: ID of the alert.
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
      security:
      - BearerAuth:
        - write.alerts
      tags:
      - Alerts
    get:
      parameters:
      - description: ID of the alert.
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
      security:
      - BearerAuth:
        - read.alerts
      tags:
      - Alerts
    put:
      parameters:
      - description: ID of the alert.
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alert'
        description: Update an existing alert.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      security:
      - BearerAuth:
        - write.alerts
      tags:
      - Alerts
  /agents:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Agent'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
      security:
      - BearerAuth:
        - read.agents
      tags:
      - Agents
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
        description: Create a new agent and generate a new API key.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      tags:
      - Agents
  /agents/{id}:
    delete:
      parameters:
      - description: ID of the alert.
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      tags:
      - Agents
    get:
      parameters:
      - description: ID of the alert.
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      tags:
      - Agents
    put:
      parameters:
      - description: ID of the alert.
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
        description: Update an existing agent.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      tags:
      - Agents
  /session/{groupName}:
    get:
      operationId: get_agent_session_state
      parameters:
      - description: Name for this group of agents.
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          $ref: '#/components/schemas/EasyString64'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentSessionState'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      tags:
      - Agent sessions
    post:
      operationId: create_agent_session
      parameters:
      - description: Name for this group of agents.
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          $ref: '#/components/schemas/EasyString64'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentSessionRequest'
        description: Create a new agent and generate a new API key.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentSessionState'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: UnprocessableEntity
      tags:
      - Agent sessions
  /accounts:
    get:
      operationId: get_accounts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden
      tags:
      - Account management
    post:
      operationId: create_account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: Account to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
      tags:
      - Account management
  /accounts/{id}:
    get:
      operationId: get_account_by_id
      parameters:
      - description: ID of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden
      tags:
      - Account management
    put:
      parameters:
      - description: ID of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: Account to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
      tags:
      - Account management
  /transactions:
    get:
      operationId: get_transactions
      parameters:
      - description: The timestamp from which to start searching
        explode: true
        in: query
        name: fromTimestamp
        required: false
        schema:
          $ref: '#/components/schemas/DateTime'
        style: form
      - description: The timestamp from which to end searching
        explode: true
        in: query
        name: toTimestamp
        required: false
        schema:
          $ref: '#/components/schemas/DateTime'
        style: form
      - description: The account whose transactions we want
        explode: true
        in: query
        name: accountId
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionList'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
      tags:
      - Account management
  /balances:
    get:
      operationId: get_account_balance
      parameters:
      - description: The account whose current balance we want
        explode: true
        in: query
        name: accountId
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: NotFound
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
      tags:
      - Account management
  /plans:
    get:
      operationId: get_plans
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanArray'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
      tags:
      - Account management
  /subscriptions:
    get:
      operationId: get_subscription_records
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionArray'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
      tags:
      - Account management
    post:
      operationId: create_subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
        description: Subscription to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionContainer'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
      tags:
      - Account management
  /subscriptions/{id}:
    get:
      operationId: get_subscription_by_id
      parameters:
      - description: ID of the subscription.
        explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/IdString'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionContainer'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: BadRequest
      tags:
      - Account management
  /info:
    get:
      operationId: get_info
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfo'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Unauthorized
      tags:
      - Info
components:
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
      description: BadRequest
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
      description: NotFound
    Unauthorised:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
      description: Unauthorized
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
      description: Forbidden
    UnprocessableEntity:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
      description: UnprocessableEntity
    MonitorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Monitor'
      description: OK
    PlanArrayResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlanArray'
      description: OK
    SubscriptionArrayResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionArray'
      description: OK
    SubscriptionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionContainer'
      description: OK
    AccountListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200'
      description: OK
    AccountResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200_1'
      description: OK
    TransactionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionList'
      description: OK
    InfoResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerInfo'
      description: OK
    MonitorCreatedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Monitor'
      description: Created
    AlertResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Alert'
      description: OK
    AlertArrayResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlertArray'
      description: OK
    AgentSessionStateResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AgentSessionState'
      description: OK
    MonitorArrayResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorArray'
      description: OK
    AgentResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Agent'
      description: OK
    NewAgentResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewAgent'
      description: OK
    MonitorStatusArrayResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MonitorStatusArray'
      description: OK
    RegistrationResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Registration'
      description: OK
    ChallengeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegistrationChallenge'
      description: OK
    AgentArrayResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Agent'
            type: array
      description: OK
    BalanceResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200_2'
      description: OK
  schemas:
    Monitor:
      example:
        period: 5m
        name: database-agent
        description: Checks that the database is up and running
        id: aZjL810xa001dz8
        enabled: true
        timeout: 5m
      properties:
        id:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        type:
          $ref: '#/components/schemas/MonitorType'
        enabled:
          default: true
          type: boolean
        name:
          example: database-agent
          maxLength: 64
          pattern: ^([A-Za-z0-9]|_|-){0,64}$
          type: string
        description:
          description: Describes what this monitor checks.
          example: Checks that the database is up and running
          type: string
        period:
          example: 5m
          maxLength: 64
          pattern: (\d{1,4}(s|m|h|d))( \d{1,4}(s|m|h|d))*
          type: string
        timeout:
          example: 5m
          maxLength: 64
          pattern: (\d{1,4}(s|m|h|d))( \d{1,4}(s|m|h|d))*
          type: string
        body:
          $ref: '#/components/schemas/MonitorBody'
      required:
      - body
      - enabled
      - name
      - period
      - timeout
      - type
    MonitorBody:
      oneOf:
      - $ref: '#/components/schemas/HttpMonitorBody'
      - $ref: '#/components/schemas/ProcessMonitorBody'
      - $ref: '#/components/schemas/TcpMonitorBody'
    TcpMonitorBody:
      properties:
        hostname:
          type: string
        port:
          maximum: 65535
          minimum: 0
          type: integer
      type: object
    RedisMonitorBody:
      properties:
        hostname:
          type: string
        port:
          maximum: 65535
          minimum: 0
          type: integer
        db:
          type: string
        username:
          type: string
        password:
          type: string
        expression:
          $ref: '#/components/schemas/BoolExpr'
      type: object
    BoolExpr:
      oneOf:
      - $ref: '#/components/schemas/AndExpr'
      - $ref: '#/components/schemas/OrExpr'
      - $ref: '#/components/schemas/NotExpr'
      - $ref: '#/components/schemas/EqExpr'
      - $ref: '#/components/schemas/LtExpr'
      - $ref: '#/components/schemas/GtExpr'
      - $ref: '#/components/schemas/LtEqExpr'
      - $ref: '#/components/schemas/GtEqExpr'
    ArthExpr:
      oneOf:
      - $ref: '#/components/schemas/PlusExpr'
      - $ref: '#/components/schemas/SubExpr'
      - $ref: '#/components/schemas/MulExpr'
      - $ref: '#/components/schemas/DivExpr'
      - $ref: '#/components/schemas/FieldExpr'
      - $ref: '#/components/schemas/ConstExpr'
    AndExpr:
      properties:
        lhs:
          $ref: '#/components/schemas/BoolExpr'
        rhs:
          $ref: '#/components/schemas/BoolExpr'
      required:
      - lhs
      - rhs
    OrExpr:
      properties:
        lhs:
          $ref: '#/components/schemas/BoolExpr'
        rhs:
          $ref: '#/components/schemas/BoolExpr'
      required:
      - lhs
      - rhs
      type: object
    NotExpr:
      properties:
        expr:
          $ref: '#/components/schemas/BoolExpr'
      type: object
    EqExpr:
      properties:
        lhs:
          $ref: '#/components/schemas/ArthExpr'
        rhs:
          $ref: '#/components/schemas/ArthExpr'
      required:
      - lhs
      - rhs
    LtExpr:
      properties:
        lhs:
          $ref: '#/components/schemas/ArthExpr'
        rhs:
          $ref: '#/components/schemas/ArthExpr'
      required:
      - lhs
      - rhs
      type: object
    GtExpr:
      properties:
        lhs:
          $ref: '#/components/schemas/ArthExpr'
        rhs:
          $ref: '#/components/schemas/ArthExpr'
      required:
      - lhs
      - rhs
      type: object
    LtEqExpr:
      properties:
        lhs:
          $ref: '#/components/schemas/ArthExpr'
        rhs:
          $ref: '#/components/schemas/ArthExpr'
      required:
      - lhs
      - rhs
      type: object
    GtEqExpr:
      properties:
        lhs:
          $ref: '#/components/schemas/ArthExpr'
        rhs:
          $ref: '#/components/schemas/ArthExpr'
      required:
      - lhs
      - rhs
      type: object
    SubExpr:
      properties:
        lhs:
          $ref: '#/components/schemas/ArthExpr'
        rhs:
          $ref: '#/components/schemas/ArthExpr'
      required:
      - lhs
      - rhs
      type: object
    PlusExpr:
      properties:
        lhs:
          $ref: '#/components/schemas/ArthExpr'
        rhs:
          $ref: '#/components/schemas/ArthExpr'
      required:
      - lhs
      - rhs
      type: object
    MulExpr:
      properties:
        lhs:
          $ref: '#/components/schemas/ArthExpr'
        rhs:
          $ref: '#/components/schemas/ArthExpr'
      required:
      - lhs
      - rhs
      type: object
    DivExpr:
      properties:
        lhs:
          $ref: '#/components/schemas/ArthExpr'
        rhs:
          $ref: '#/components/schemas/ArthExpr'
      required:
      - lhs
      - rhs
      type: object
    FieldExpr:
      properties:
        name:
          type: string
      required:
      - name
      type: object
    ConstExpr:
      properties:
        constant:
          type: number
      required:
      - constant
      type: object
    MonitorArray:
      example:
        monitors:
        - period: 5m
          name: database-agent
          description: Checks that the database is up and running
          id: aZjL810xa001dz8
          enabled: true
          timeout: 5m
        - period: 5m
          name: database-agent
          description: Checks that the database is up and running
          id: aZjL810xa001dz8
          enabled: true
          timeout: 5m
      properties:
        monitors:
          items:
            $ref: '#/components/schemas/Monitor'
          type: array
      required:
      - monitors
      type: object
    JwtObject:
      example:
        refreshTokenExpiry: 1613282078
        jwt: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        jwtExpiry: 1613274878
        jwtScopes:
        - monitors.read
        - alerts.read
        refreshToken: 1ka82kjHoiH8789BhlJnl98pkBHjj
      properties:
        jwt:
          description: The JSON Web Token that can be used to access the API.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          type: string
        jwtExpiry:
          description: Time at which the JWT expires in seconds since Unix Epoc
          example: 1613274878
          type: number
        jwtScopes:
          example:
          - monitors.read
          - alerts.read
          items:
            type: string
          type: array
        refreshToken:
          description: A Bearer token that can used to get a new JWT.
          example: 1ka82kjHoiH8789BhlJnl98pkBHjj
          type: string
        refreshTokenExpiry:
          description: Time at which the refresh token expires in seconds since Unix
            Epoc
          example: 1613282078
          type: number
      required:
      - jwt
      - jwtExpiry
      - jwtScopes
      - refreshToken
      - refreshTokenExpiry
      type: object
    HttpMonitorBody:
      properties:
        url:
          type: string
        method:
          type: string
        headers:
          items:
            $ref: '#/components/schemas/HttpHeader'
          type: array
        body:
          type: string
      type: object
    ProcessMonitorBody:
      properties:
        executable:
          description: The name of the executable process to be monitored.
          example: node
          type: string
        isPathAbsolute:
          default: false
          description: If true, the process(s) will be located by the full path of
            the executable e.g. /usr/bin/node
          type: boolean
        minimumCount:
          description: The minimum number of processes that match the executable.
          example: 1
          type: integer
        maximumCount:
          description: 'The maximum number of processes that match the executable. '
          example: 10
          type: integer
        maximumRamIndividual:
          maxLength: 64
          pattern: ^\d+\s*(k|K|M|G|T|P)B$
          type: string
        maximumRamTotal:
          maxLength: 64
          pattern: ^\d+\s*(k|K|M|G|T|P)B$
          type: string
      type: object
    MonitorStatusArray:
      example:
        statuses:
        - monitorId: aZjL810xa001dz8
          lastResult:
            actual: HTTP status code of 500
            expected: HTTP status code of 200
          log:
          - value: Beginning HTTP request to https://www.example.com
            timestamp: 2017-07-21T17:32:28Z
          - value: Beginning HTTP request to https://www.example.com
            timestamp: 2017-07-21T17:32:28Z
          description: HTTP monitor for https://www.example.com
          timestamp: 2017-07-21T17:32:28Z
        - monitorId: aZjL810xa001dz8
          lastResult:
            actual: HTTP status code of 500
            expected: HTTP status code of 200
          log:
          - value: Beginning HTTP request to https://www.example.com
            timestamp: 2017-07-21T17:32:28Z
          - value: Beginning HTTP request to https://www.example.com
            timestamp: 2017-07-21T17:32:28Z
          description: HTTP monitor for https://www.example.com
          timestamp: 2017-07-21T17:32:28Z
      properties:
        statuses:
          items:
            $ref: '#/components/schemas/MonitorStatus'
          type: array
      required:
      - statuses
      type: object
    MonitorStatus:
      example:
        monitorId: aZjL810xa001dz8
        lastResult:
          actual: HTTP status code of 500
          expected: HTTP status code of 200
        log:
        - value: Beginning HTTP request to https://www.example.com
          timestamp: 2017-07-21T17:32:28Z
        - value: Beginning HTTP request to https://www.example.com
          timestamp: 2017-07-21T17:32:28Z
        description: HTTP monitor for https://www.example.com
        timestamp: 2017-07-21T17:32:28Z
      properties:
        monitorId:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/MonitorStatusIndicator'
        timestamp:
          description: UTC UNIX timestamp in with fractional offset.
          example: 2017-07-21T17:32:28Z
          format: date-time
          readOnly: true
          type: string
        lastResult:
          $ref: '#/components/schemas/MonitorStatusResult'
        description:
          example: HTTP monitor for https://www.example.com
          maxLength: 2048
          type: string
        log:
          items:
            $ref: '#/components/schemas/MonitorStatusLogEntry'
          type: array
      required:
      - description
      - lastResult
      - monitorId
      - status
      - timestamp
      type: object
    MonitorStatusResult:
      example:
        actual: HTTP status code of 500
        expected: HTTP status code of 200
      properties:
        expected:
          example: HTTP status code of 200
          type: string
        actual:
          example: HTTP status code of 500
          type: string
      required:
      - actual
      - expected
      type: object
    MonitorStatusLogEntry:
      example:
        value: Beginning HTTP request to https://www.example.com
        timestamp: 2017-07-21T17:32:28Z
      properties:
        timestamp:
          description: UTC UNIX timestamp in with fractional offset.
          example: 2017-07-21T17:32:28Z
          format: date-time
          readOnly: true
          type: string
        value:
          example: Beginning HTTP request to https://www.example.com
          maxLength: 160
          type: string
      required:
      - timestamp
      - value
      type: object
    AgentSessionRequest:
      example:
        sessionId: sessionId
        isNew: true
      properties:
        sessionId:
          type: string
        isNew:
          description: Optional indicator that tells the server that this is a new
            session.
          type: boolean
      required:
      - sessionId
      type: object
    MonitorStatusIndicator:
      enum:
      - ok
      - down
      type: string
    Alert:
      example:
        description: Sends an email if a database monitor goes down.
        threshold: 0
        id: aZjL810xa001dz8
        type: msteams
        enabled: true
        monitors:
        - aZjL810xa001dz8
        - aZjL810xa001dz8
      properties:
        type:
          enum:
          - msteams
          - webhook
          - email
          type: string
        id:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        description:
          description: Describes what your alert will do.
          example: Sends an email if a database monitor goes down.
          type: string
        monitors:
          items:
            $ref: '#/components/schemas/IdString'
          type: array
        threshold:
          type: integer
        enabled:
          type: boolean
        body:
          $ref: '#/components/schemas/AlertBody'
      required:
      - body
      - enabled
      - monitors
      - threshold
      - type
    AlertBody:
      oneOf:
      - $ref: '#/components/schemas/MsTeamsAlertBody'
      - $ref: '#/components/schemas/WebhookAlertBody'
      - $ref: '#/components/schemas/EmailAlertBody'
    MsTeamsAlertBody:
      properties:
        url:
          type: string
      type: object
    EmailAlertBody:
      properties:
        from:
          example: agent@example.com
          type: string
        recipients:
          description: The addresses to which the alert email will be sent.
          items:
            type: string
          type: array
        host:
          description: Your SMTP server's hostname
          example: stmp.example.com
          type: string
        port:
          description: The port number for your SMTP server
          example: 587
          type: number
        tlsMode:
          $ref: '#/components/schemas/TlsMode'
        username:
          example: admin@example.com
          type: string
        password:
          example: 2gDxccTDVxzfpKcW
          type: string
      type: object
    WebhookAlertBody:
      properties:
        url:
          type: string
        headers:
          items:
            $ref: '#/components/schemas/HttpHeader'
          type: array
      type: object
    Agent:
      example:
        apiKey: Xv3ndONX5tyPy1eon8A9ePVCHiThsyGaGFI20mtKVQTANq5oz3pffqXyQjkCDfcP
        name: database-agent
        description: The database server agent
        id: aZjL810xa001dz8
        group: database-agent
      properties:
        id:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        name:
          example: database-agent
          maxLength: 64
          pattern: ^([A-Za-z0-9]|_|-){0,64}$
          type: string
        description:
          description: Describes what this agent is or where it will run.
          example: The database server agent
          type: string
        group:
          example: database-agent
          maxLength: 64
          pattern: ^([A-Za-z0-9]|_|-){0,64}$
          type: string
        apiKey:
          example: Xv3ndONX5tyPy1eon8A9ePVCHiThsyGaGFI20mtKVQTANq5oz3pffqXyQjkCDfcP
          maxLength: 64
          minLength: 64
          pattern: ^([A-Za-z0-9]){64}$
          readOnly: true
          type: string
      required:
      - name
      type: object
    NewAgent:
      allOf:
      - $ref: '#/components/schemas/Agent'
      properties:
        apiKey:
          example: Xv3ndONX5tyPy1eon8A9ePVCHiThsyGaGFI20mtKVQTANq5oz3pffqXyQjkCDfcP
          maxLength: 64
          minLength: 64
          pattern: ^([A-Za-z0-9]){64}$
          readOnly: true
          type: string
      required:
      - apiKey
      type: object
    AgentSessionState:
      example:
        group: database-agent
        agents:
        - agentId: aZjL810xa001dz8
          lastHeartbeatTimestamp: 1590656048
          monitorIds:
          - aZjL810xa001dz8
          - aZjL810xa001dz8
          sessionId: database-agent
        - agentId: aZjL810xa001dz8
          lastHeartbeatTimestamp: 1590656048
          monitorIds:
          - aZjL810xa001dz8
          - aZjL810xa001dz8
          sessionId: database-agent
      properties:
        group:
          example: database-agent
          maxLength: 64
          pattern: ^([A-Za-z0-9]|_|-){0,64}$
          type: string
        agents:
          items:
            $ref: '#/components/schemas/AgentSessionAssignment'
          type: array
      required:
      - assignment
      - group
      type: object
    AgentSessionAssignment:
      example:
        agentId: aZjL810xa001dz8
        lastHeartbeatTimestamp: 1590656048
        monitorIds:
        - aZjL810xa001dz8
        - aZjL810xa001dz8
        sessionId: database-agent
      properties:
        sessionId:
          example: database-agent
          maxLength: 64
          pattern: ^([A-Za-z0-9]|_|-){0,64}$
          type: string
        agentId:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        monitorIds:
          items:
            $ref: '#/components/schemas/IdString'
          type: array
        lastHeartbeatTimestamp:
          example: 1590656048
          type: integer
      required:
      - agentId
      - lastHeartbeat
      - monitorIds
      - sessionId
      type: object
    ByteUnit:
      maxLength: 64
      pattern: ^\d+\s*(k|K|M|G|T|P)B$
      type: string
    HttpHeader:
      properties:
        name:
          type: string
        value:
          type: string
      required:
      - name
      - value
      type: object
    EasyString64:
      example: database-agent
      maxLength: 64
      pattern: ^([A-Za-z0-9]|_|-){0,64}$
      type: string
    TimeDelta:
      example: 5m
      maxLength: 64
      pattern: (\d{1,4}(s|m|h|d))( \d{1,4}(s|m|h|d))*
      type: string
    AgentApiKey:
      example: Xv3ndONX5tyPy1eon8A9ePVCHiThsyGaGFI20mtKVQTANq5oz3pffqXyQjkCDfcP
      maxLength: 64
      minLength: 64
      pattern: ^([A-Za-z0-9]){64}$
      readOnly: true
      type: string
    WriteableIdString:
      example: aZjL810xa001dz8
      maxLength: 64
      minLength: 32
      pattern: '[A-Za-z0-9]'
      type: string
    IdString:
      example: aZjL810xa001dz8
      maxLength: 64
      minLength: 32
      pattern: '[A-Za-z0-9]'
      readOnly: true
      type: string
    ChargeType:
      enum:
      - daily
      - weekly
      - monthly
      type: string
    MonitorType:
      description: What sort of system or entity the monitor will run a check on
      enum:
      - http
      - process
      - tcp
      type: string
    ErrorList:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/ResponseError'
          type: array
      required:
      - errors
      type: object
    ResponseError:
      properties:
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
        errorMessage:
          example: A technical explanation of the error useful for debugging.
          type: string
        userErrorMessage:
          example: A brief explanation of the error you may present to the user.
          type: string
      required:
      - errorCode
      - errorMessage
      - userErrorMessage
      type: object
    AlertArray:
      example:
        alerts:
        - description: Sends an email if a database monitor goes down.
          threshold: 0
          id: aZjL810xa001dz8
          type: msteams
          enabled: true
          monitors:
          - aZjL810xa001dz8
          - aZjL810xa001dz8
        - description: Sends an email if a database monitor goes down.
          threshold: 0
          id: aZjL810xa001dz8
          type: msteams
          enabled: true
          monitors:
          - aZjL810xa001dz8
          - aZjL810xa001dz8
      properties:
        alerts:
          items:
            $ref: '#/components/schemas/Alert'
          type: array
      required:
      - alerts
      type: object
    Registration:
      example:
        challengeSolution: challengeSolution
        challengeId: challengeId
        emailAddress: jerry@apples.com
        password: ?wA$hPg?2!qPcYsh
        accountName: Fun Computers Incorporated
        id: aZjL810xa001dz8
      properties:
        id:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        accountName:
          example: Fun Computers Incorporated
          maxLength: 64
          type: string
        challengeId:
          type: string
        challengeSolution:
          type: string
        emailAddress:
          example: jerry@apples.com
          pattern: ^.*@.*$
          type: string
        password:
          example: ?wA$hPg?2!qPcYsh
          maxLength: 64
          minLength: 8
          type: string
          writeOnly: true
      required:
      - accountName
      - challengeId
      - challengeSolution
      - emailAddress
      - password
      type: object
    RegistrationConfirmation:
      example:
        confirmationCode: confirmationCode
        emailAddress: emailAddress
        id: aZjL810xa001dz8
      properties:
        id:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        confirmationCode:
          description: A secret string between the client and the API. A valid confirmation
            code is proof the user owns the email address
          maxLength: 32
          minLength: 8
          type: string
        emailAddress:
          type: string
      required:
      - confirmationCode
      - id
      type: object
    EmailAddress:
      example: jerry@apples.com
      pattern: ^.*@.*$
      type: string
    Password:
      example: ?wA$hPg?2!qPcYsh
      maxLength: 64
      minLength: 8
      type: string
      writeOnly: true
    RegistrationChallenge:
      description: A Captcha challenge that a human being will have to solve.
      example:
        solution: solution
        data: data
        id: aZjL810xa001dz8
        mimeType: image/png
        type: captcha
        encoding: base64
        url: url
        status: unsolved
      properties:
        id:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        status:
          enum:
          - unsolved
          - solved
          - inactive
          readOnly: true
          type: string
        solution:
          description: The solution that will activate the challenge. This can be
            used to prove you are human.
          type: string
          writeOnly: true
        type:
          description: What the user has to do to pass the challenge. For now this
            is just `image`.
          enum:
          - captcha
          readOnly: true
          type: string
        encoding:
          description: Since this is a JSON api, the image data has to be encoded
            in some way. For now image data is encoded in base 64.
          enum:
          - base64
          readOnly: true
          type: string
        mimeType:
          description: Describes how to interpret the `data` field.
          enum:
          - image/png
          readOnly: true
          type: string
        url:
          description: The URL for the image, if there is one.
          readOnly: true
          type: string
        data:
          readOnly: true
          type: string
      required:
      - encoding
      - mimeType
      - type
      type: object
    TlsMode:
      description: Controls whether or not STARTTLS will be used.
      enum:
      - none
      - tls
      - starttls
      type: string
    ErrorCode:
      description: Global error code that indicates what went wrong
      enum:
      - unauthorised
      - forbidden
      - not_found
      - product_limit_reached
      - database_failure
      - solution_incorrect
      - solution_expired
      - internal_parse_failure
      - invalid_string
      - invalid_confirmation_code
      - conflict
      - insufficient_funds
      type: string
    ServerInfo:
      description: Server info and status about open connections
      example:
        processMemoryBytes: 52428800
        openInwardConnections: 20
        vcsRef: 5ca8fb27561045fdf0894603179ebb18cb19523b
      properties:
        vcsRef:
          example: 5ca8fb27561045fdf0894603179ebb18cb19523b
          type: string
        processMemoryBytes:
          example: 52428800
          type: number
        openInwardConnections:
          example: 20
          type: number
      required:
      - activeJwtsLastHour
      - activeRequests
      - openInwardConnections
      - processMemoryBytes
      - requestsLastHour
      - requestsLastMinute
      type: object
    SubscriptionArray:
      items:
        $ref: '#/components/schemas/Subscription'
      type: array
    SubscriptionContainer:
      example:
        subscription:
          stoppedAt: 2017-07-21T17:32:28Z
          organisationId: aZjL810xa001dz8
          startedAt: 2017-07-21T17:32:28Z
          planId: aZjL810xa001dz8
          id: aZjL810xa001dz8
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'
      type: object
    PlanArray:
      example:
        plans:
        - maximumPrice:
            decimalPlaces: 2
            value: 12345
          name: Basic
          description: The free plan that you get one when you sign up.
          id: aZjL810xa001dz8
          products:
          - price:
              decimalPlaces: 2
              value: 12345
            count: 15
            description: The free plan that you get one when you sign up.
          - price:
              decimalPlaces: 2
              value: 12345
            count: 15
            description: The free plan that you get one when you sign up.
        - maximumPrice:
            decimalPlaces: 2
            value: 12345
          name: Basic
          description: The free plan that you get one when you sign up.
          id: aZjL810xa001dz8
          products:
          - price:
              decimalPlaces: 2
              value: 12345
            count: 15
            description: The free plan that you get one when you sign up.
          - price:
              decimalPlaces: 2
              value: 12345
            count: 15
            description: The free plan that you get one when you sign up.
      properties:
        plans:
          items:
            $ref: '#/components/schemas/Plan'
          type: array
      required:
      - plans
      type: object
    Plan:
      example:
        maximumPrice:
          decimalPlaces: 2
          value: 12345
        name: Basic
        description: The free plan that you get one when you sign up.
        id: aZjL810xa001dz8
        products:
        - price:
            decimalPlaces: 2
            value: 12345
          count: 15
          description: The free plan that you get one when you sign up.
        - price:
            decimalPlaces: 2
            value: 12345
          count: 15
          description: The free plan that you get one when you sign up.
      properties:
        id:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        name:
          description: Description of what this plan is for, and what it offers.
          example: Basic
          type: string
        description:
          description: Description of what this plan is for, and what it offers.
          example: The free plan that you get one when you sign up.
          type: string
        products:
          items:
            $ref: '#/components/schemas/Product'
          type: array
        maximumPrice:
          $ref: '#/components/schemas/Money'
      required:
      - description
      - id
      - maximumPrice
      - name
      - products
      type: object
    Subscription:
      example:
        stoppedAt: 2017-07-21T17:32:28Z
        organisationId: aZjL810xa001dz8
        startedAt: 2017-07-21T17:32:28Z
        planId: aZjL810xa001dz8
        id: aZjL810xa001dz8
      properties:
        id:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        organisationId:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        startedAt:
          description: UTC UNIX timestamp in with fractional offset.
          example: 2017-07-21T17:32:28Z
          format: date-time
          readOnly: true
          type: string
        stoppedAt:
          description: UTC UNIX timestamp in with fractional offset.
          example: 2017-07-21T17:32:28Z
          format: date-time
          readOnly: true
          type: string
        planId:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          type: string
        chargeType:
          $ref: '#/components/schemas/ChargeType'
      required:
      - chargeType
      - planId
      type: object
    SubscriptionStatus:
      enum:
      - active
      - inactive
      type: string
    DateTime:
      description: UTC UNIX timestamp in with fractional offset.
      example: 2017-07-21T17:32:28Z
      format: date-time
      readOnly: true
      type: string
    Account:
      example:
        name: Your organisational's subscription
        id: aZjL810xa001dz8
      properties:
        id:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        name:
          example: Your organisational's subscription
          type: string
        type:
          $ref: '#/components/schemas/AccountType'
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
      required:
      - currencyCode
      - name
      - type
      type: object
    AccountType:
      enum:
      - subscription_charges
      - subscription_credits
      type: string
    Product:
      example:
        price:
          decimalPlaces: 2
          value: 12345
        count: 15
        description: The free plan that you get one when you sign up.
      properties:
        entity:
          $ref: '#/components/schemas/ProductEntity'
        price:
          $ref: '#/components/schemas/Money'
        count:
          example: 15
          format: int32
          type: integer
        description:
          description: 15 monitors for free.
          example: The free plan that you get one when you sign up.
          type: string
      required:
      - count
      - description
      - entity
      - price
      type: object
    ProductEntity:
      enum:
      - monitor
      - status
      - alert
      - agent
      - user
      - session
      type: string
    Money:
      example:
        decimalPlaces: 2
        value: 12345
      properties:
        value:
          example: 12345
          type: integer
        decimalPlaces:
          example: 2
          type: integer
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
      required:
      - currencyCode
      - decimalPlaces
      - value
      type: object
    CurrencyCode:
      enum:
      - NZD
      - USD
      - EUR
      type: string
    Balances:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/Balance'
          type: array
      type: object
    TransactionList:
      example:
        closingBalance:
          accountId: aZjL810xa001dz8
          balance:
            decimalPlaces: 2
            value: 12345
          timestamp: 2017-07-21T17:32:28Z
          availableBalance:
            decimalPlaces: 2
            value: 12345
        transactions:
        - amount:
            decimalPlaces: 2
            value: 12345
          description: Subscription charge for the period 2021-06-06 to 2021-07-06
            (inclusive)
          id: aZjL810xa001dz8
          timestamp: 2017-07-21T17:32:28Z
        - amount:
            decimalPlaces: 2
            value: 12345
          description: Subscription charge for the period 2021-06-06 to 2021-07-06
            (inclusive)
          id: aZjL810xa001dz8
          timestamp: 2017-07-21T17:32:28Z
        openingBalance:
          accountId: aZjL810xa001dz8
          balance:
            decimalPlaces: 2
            value: 12345
          timestamp: 2017-07-21T17:32:28Z
          availableBalance:
            decimalPlaces: 2
            value: 12345
      properties:
        transactions:
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
        openingBalance:
          $ref: '#/components/schemas/Balance'
        closingBalance:
          $ref: '#/components/schemas/Balance'
      type: object
    Transaction:
      example:
        amount:
          decimalPlaces: 2
          value: 12345
        description: Subscription charge for the period 2021-06-06 to 2021-07-06 (inclusive)
        id: aZjL810xa001dz8
        timestamp: 2017-07-21T17:32:28Z
      properties:
        id:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        timestamp:
          description: UTC UNIX timestamp in with fractional offset.
          example: 2017-07-21T17:32:28Z
          format: date-time
          readOnly: true
          type: string
        amount:
          $ref: '#/components/schemas/Money'
        description:
          example: Subscription charge for the period 2021-06-06 to 2021-07-06 (inclusive)
          readOnly: true
          type: string
        code:
          $ref: '#/components/schemas/TransactionCode'
      required:
      - amount
      - code
      - description
      - id
      - timestamp
      type: object
    TransactionCode:
      enum:
      - subscription_credit
      - subscription_charge
      - subscription_refund
      - subscription_correction
      - subscription_adjustment
      - opening_balance
      type: string
    Balance:
      example:
        accountId: aZjL810xa001dz8
        balance:
          decimalPlaces: 2
          value: 12345
        timestamp: 2017-07-21T17:32:28Z
        availableBalance:
          decimalPlaces: 2
          value: 12345
      properties:
        accountId:
          example: aZjL810xa001dz8
          maxLength: 64
          minLength: 32
          pattern: '[A-Za-z0-9]'
          readOnly: true
          type: string
        timestamp:
          description: UTC UNIX timestamp in with fractional offset.
          example: 2017-07-21T17:32:28Z
          format: date-time
          readOnly: true
          type: string
        balance:
          $ref: '#/components/schemas/Money'
        availableBalance:
          $ref: '#/components/schemas/Money'
      required:
      - accountId
      - availableBalance
      - balance
      - timestamp
      type: object
    inline_response_200:
      example:
        accounts:
        - name: Your organisational's subscription
          id: aZjL810xa001dz8
        - name: Your organisational's subscription
          id: aZjL810xa001dz8
      properties:
        accounts:
          items:
            $ref: '#/components/schemas/Account'
          type: array
      type: object
    inline_response_200_1:
      example:
        account:
          name: Your organisational's subscription
          id: aZjL810xa001dz8
      properties:
        account:
          $ref: '#/components/schemas/Account'
      type: object
    inline_response_200_2:
      example:
        balance:
          accountId: aZjL810xa001dz8
          balance:
            decimalPlaces: 2
            value: 12345
          timestamp: 2017-07-21T17:32:28Z
          availableBalance:
            decimalPlaces: 2
            value: 12345
      properties:
        balance:
          $ref: '#/components/schemas/Balance'
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
    BearerAuth:
      scheme: bearer
      type: http

