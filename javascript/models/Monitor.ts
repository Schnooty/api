/* tslint:disable */
/* eslint-disable */
/**
 * Schnooty API
 * This is the Schnooty API. It is used by both our agent and web application to manage your monitors, agents, alerts, account settings and everything else
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@schnooty.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MonitorBody,
    MonitorBodyFromJSON,
    MonitorBodyFromJSONTyped,
    MonitorBodyToJSON,
    MonitorType,
    MonitorTypeFromJSON,
    MonitorTypeFromJSONTyped,
    MonitorTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface Monitor
 */
export interface Monitor {
    /**
     * 
     * @type {string}
     * @memberof Monitor
     */
    readonly id?: string;
    /**
     * 
     * @type {MonitorType}
     * @memberof Monitor
     */
    type: MonitorType;
    /**
     * 
     * @type {boolean}
     * @memberof Monitor
     */
    enabled: boolean;
    /**
     * 
     * @type {string}
     * @memberof Monitor
     */
    name: string;
    /**
     * Describes what this monitor checks.
     * @type {string}
     * @memberof Monitor
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Monitor
     */
    period: string;
    /**
     * 
     * @type {string}
     * @memberof Monitor
     */
    timeout: string;
    /**
     * 
     * @type {MonitorBody}
     * @memberof Monitor
     */
    body: MonitorBody;
}

export function MonitorFromJSON(json: any): Monitor {
    return MonitorFromJSONTyped(json, false);
}

export function MonitorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Monitor {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': MonitorTypeFromJSON(json['type']),
        'enabled': json['enabled'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'period': json['period'],
        'timeout': json['timeout'],
        'body': MonitorBodyFromJSON(json['body']),
    };
}

export function MonitorToJSON(value?: Monitor | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': MonitorTypeToJSON(value.type),
        'enabled': value.enabled,
        'name': value.name,
        'description': value.description,
        'period': value.period,
        'timeout': value.timeout,
        'body': MonitorBodyToJSON(value.body),
    };
}


