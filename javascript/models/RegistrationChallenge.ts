/* tslint:disable */
/* eslint-disable */
/**
 * Open Monitors
 * This is the Open Monitors API. All operations that a user or an agent would want to complete, including signing up, are listed here.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@openmonitors.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A Captcha challenge that a human being will have to solve.
 * @export
 * @interface RegistrationChallenge
 */
export interface RegistrationChallenge {
    /**
     * 
     * @type {string}
     * @memberof RegistrationChallenge
     */
    readonly id?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationChallenge
     */
    readonly status?: RegistrationChallengeStatusEnum;
    /**
     * The solution that will activate the challenge. This can be used to prove you are human.
     * @type {string}
     * @memberof RegistrationChallenge
     */
    solution?: string;
    /**
     * What the user has to do to pass the challenge. For now this is just `image`.
     * @type {string}
     * @memberof RegistrationChallenge
     */
    readonly type: RegistrationChallengeTypeEnum;
    /**
     * Since this is a JSON api, the image data has to be encoded in some way. For now image data is encoded in base 64.
     * @type {string}
     * @memberof RegistrationChallenge
     */
    readonly encoding: RegistrationChallengeEncodingEnum;
    /**
     * Describes how to interpret the `data` field.
     * @type {string}
     * @memberof RegistrationChallenge
     */
    readonly mimeType: RegistrationChallengeMimeTypeEnum;
    /**
     * The URL for the image, if there is one.
     * @type {string}
     * @memberof RegistrationChallenge
     */
    readonly url?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationChallenge
     */
    readonly data?: string;
}

export function RegistrationChallengeFromJSON(json: any): RegistrationChallenge {
    return RegistrationChallengeFromJSONTyped(json, false);
}

export function RegistrationChallengeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegistrationChallenge {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'solution': !exists(json, 'solution') ? undefined : json['solution'],
        'type': json['type'],
        'encoding': json['encoding'],
        'mimeType': json['mimeType'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'data': !exists(json, 'data') ? undefined : json['data'],
    };
}

export function RegistrationChallengeToJSON(value?: RegistrationChallenge | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'solution': value.solution,
    };
}

/**
* @export
* @enum {string}
*/
export enum RegistrationChallengeStatusEnum {
    Unsolved = 'unsolved',
    Solved = 'solved',
    Inactive = 'inactive'
}
/**
* @export
* @enum {string}
*/
export enum RegistrationChallengeTypeEnum {
    Captcha = 'captcha'
}
/**
* @export
* @enum {string}
*/
export enum RegistrationChallengeEncodingEnum {
    Base64 = 'base64'
}
/**
* @export
* @enum {string}
*/
export enum RegistrationChallengeMimeTypeEnum {
    ImagePng = 'image/png'
}


