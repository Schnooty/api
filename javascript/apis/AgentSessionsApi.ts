/* tslint:disable */
/* eslint-disable */
/**
 * Open Monitors
 * This is the Open Monitors API. All operations that a user or an agent would want to complete, including signing up, are listed here.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@openmonitors.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AgentSessionRequest,
    AgentSessionRequestFromJSON,
    AgentSessionRequestToJSON,
    AgentSessionState,
    AgentSessionStateFromJSON,
    AgentSessionStateToJSON,
    ErrorList,
    ErrorListFromJSON,
    ErrorListToJSON,
} from '../models';

export interface CreateAgentSessionRequest {
    groupName: string;
    agentSessionRequest: AgentSessionRequest;
}

export interface GetAgentSessionStateRequest {
    groupName: string;
}

/**
 * 
 */
export class AgentSessionsApi extends runtime.BaseAPI {

    /**
     */
    async createAgentSessionRaw(requestParameters: CreateAgentSessionRequest): Promise<runtime.ApiResponse<AgentSessionState>> {
        if (requestParameters.groupName === null || requestParameters.groupName === undefined) {
            throw new runtime.RequiredError('groupName','Required parameter requestParameters.groupName was null or undefined when calling createAgentSession.');
        }

        if (requestParameters.agentSessionRequest === null || requestParameters.agentSessionRequest === undefined) {
            throw new runtime.RequiredError('agentSessionRequest','Required parameter requestParameters.agentSessionRequest was null or undefined when calling createAgentSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/session/{groupName}`.replace(`{${"groupName"}}`, encodeURIComponent(String(requestParameters.groupName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentSessionRequestToJSON(requestParameters.agentSessionRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentSessionStateFromJSON(jsonValue));
    }

    /**
     */
    async createAgentSession(requestParameters: CreateAgentSessionRequest): Promise<AgentSessionState> {
        const response = await this.createAgentSessionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAgentSessionStateRaw(requestParameters: GetAgentSessionStateRequest): Promise<runtime.ApiResponse<AgentSessionState>> {
        if (requestParameters.groupName === null || requestParameters.groupName === undefined) {
            throw new runtime.RequiredError('groupName','Required parameter requestParameters.groupName was null or undefined when calling getAgentSessionState.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session/{groupName}`.replace(`{${"groupName"}}`, encodeURIComponent(String(requestParameters.groupName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentSessionStateFromJSON(jsonValue));
    }

    /**
     */
    async getAgentSessionState(requestParameters: GetAgentSessionStateRequest): Promise<AgentSessionState> {
        const response = await this.getAgentSessionStateRaw(requestParameters);
        return await response.value();
    }

}
