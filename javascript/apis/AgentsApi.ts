/* tslint:disable */
/* eslint-disable */
/**
 * Open Monitors
 * This is the Open Monitors API. All operations that a user or an agent would want to complete, including signing up, are listed here.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@openmonitors.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Agent,
    AgentFromJSON,
    AgentToJSON,
    ErrorList,
    ErrorListFromJSON,
    ErrorListToJSON,
} from '../models';

export interface AgentsIdDeleteRequest {
    id: string;
}

export interface AgentsIdGetRequest {
    id: string;
}

export interface AgentsIdPutRequest {
    id: string;
    agent: Agent;
}

export interface AgentsPostRequest {
    agent: Agent;
}

/**
 * 
 */
export class AgentsApi extends runtime.BaseAPI {

    /**
     */
    async agentsGetRaw(): Promise<runtime.ApiResponse<Array<Agent>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/agents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AgentFromJSON));
    }

    /**
     */
    async agentsGet(): Promise<Array<Agent>> {
        const response = await this.agentsGetRaw();
        return await response.value();
    }

    /**
     */
    async agentsIdDeleteRaw(requestParameters: AgentsIdDeleteRequest): Promise<runtime.ApiResponse<Agent>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling agentsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/agents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentFromJSON(jsonValue));
    }

    /**
     */
    async agentsIdDelete(requestParameters: AgentsIdDeleteRequest): Promise<Agent> {
        const response = await this.agentsIdDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async agentsIdGetRaw(requestParameters: AgentsIdGetRequest): Promise<runtime.ApiResponse<Agent>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling agentsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/agents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentFromJSON(jsonValue));
    }

    /**
     */
    async agentsIdGet(requestParameters: AgentsIdGetRequest): Promise<Agent> {
        const response = await this.agentsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async agentsIdPutRaw(requestParameters: AgentsIdPutRequest): Promise<runtime.ApiResponse<Agent>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling agentsIdPut.');
        }

        if (requestParameters.agent === null || requestParameters.agent === undefined) {
            throw new runtime.RequiredError('agent','Required parameter requestParameters.agent was null or undefined when calling agentsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/agents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgentToJSON(requestParameters.agent),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentFromJSON(jsonValue));
    }

    /**
     */
    async agentsIdPut(requestParameters: AgentsIdPutRequest): Promise<Agent> {
        const response = await this.agentsIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async agentsPostRaw(requestParameters: AgentsPostRequest): Promise<runtime.ApiResponse<Agent>> {
        if (requestParameters.agent === null || requestParameters.agent === undefined) {
            throw new runtime.RequiredError('agent','Required parameter requestParameters.agent was null or undefined when calling agentsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/agents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentToJSON(requestParameters.agent),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentFromJSON(jsonValue));
    }

    /**
     */
    async agentsPost(requestParameters: AgentsPostRequest): Promise<Agent> {
        const response = await this.agentsPostRaw(requestParameters);
        return await response.value();
    }

}
