/* tslint:disable */
/* eslint-disable */
/**
 * Schnooty API
 * This is the Schnooty API. It is used by both our agent and web application to manage your monitors, agents, alerts, account settings and everything else
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@schnooty.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorList,
    ErrorListFromJSON,
    ErrorListToJSON,
    Monitor,
    MonitorFromJSON,
    MonitorToJSON,
    MonitorArray,
    MonitorArrayFromJSON,
    MonitorArrayToJSON,
} from '../models';

export interface GetMonitorByIdRequest {
    id: string;
}

export interface MonitorsIdDeleteRequest {
    id: string;
}

export interface PostMonitorRequest {
    monitor: Monitor;
}

export interface UpdateMonitorRequest {
    id: string;
    monitor: Monitor;
}

/**
 * 
 */
export class MonitorsApi extends runtime.BaseAPI {

    /**
     * Get a monitor by ID
     */
    async getMonitorByIdRaw(requestParameters: GetMonitorByIdRequest): Promise<runtime.ApiResponse<Monitor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMonitorById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MonitorFromJSON(jsonValue));
    }

    /**
     * Get a monitor by ID
     */
    async getMonitorById(requestParameters: GetMonitorByIdRequest): Promise<Monitor> {
        const response = await this.getMonitorByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a collection of all monitors created.  
     * Get a list of all monitors in your account.
     */
    async getMonitorsRaw(): Promise<runtime.ApiResponse<MonitorArray>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MonitorArrayFromJSON(jsonValue));
    }

    /**
     * Returns a collection of all monitors created.  
     * Get a list of all monitors in your account.
     */
    async getMonitors(): Promise<MonitorArray> {
        const response = await this.getMonitorsRaw();
        return await response.value();
    }

    /**
     */
    async monitorsIdDeleteRaw(requestParameters: MonitorsIdDeleteRequest): Promise<runtime.ApiResponse<Monitor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling monitorsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MonitorFromJSON(jsonValue));
    }

    /**
     */
    async monitorsIdDelete(requestParameters: MonitorsIdDeleteRequest): Promise<Monitor> {
        const response = await this.monitorsIdDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new monitor from the details in the request.
     * Create a new monitor
     */
    async postMonitorRaw(requestParameters: PostMonitorRequest): Promise<runtime.ApiResponse<Monitor>> {
        if (requestParameters.monitor === null || requestParameters.monitor === undefined) {
            throw new runtime.RequiredError('monitor','Required parameter requestParameters.monitor was null or undefined when calling postMonitor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MonitorToJSON(requestParameters.monitor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MonitorFromJSON(jsonValue));
    }

    /**
     * Create a new monitor from the details in the request.
     * Create a new monitor
     */
    async postMonitor(requestParameters: PostMonitorRequest): Promise<Monitor> {
        const response = await this.postMonitorRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing monitor by ID
     */
    async updateMonitorRaw(requestParameters: UpdateMonitorRequest): Promise<runtime.ApiResponse<Monitor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMonitor.');
        }

        if (requestParameters.monitor === null || requestParameters.monitor === undefined) {
            throw new runtime.RequiredError('monitor','Required parameter requestParameters.monitor was null or undefined when calling updateMonitor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MonitorToJSON(requestParameters.monitor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MonitorFromJSON(jsonValue));
    }

    /**
     * Update an existing monitor by ID
     */
    async updateMonitor(requestParameters: UpdateMonitorRequest): Promise<Monitor> {
        const response = await this.updateMonitorRaw(requestParameters);
        return await response.value();
    }

}
